{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React from \"react\";\nimport axios from \"axios\";\nimport { useQuery, queryCache } from \"react-query\";\nexport const fetchCoffee = coffeeId => axios.get(`http://localhost:5000/api/coffee/fetch/${coffeeId}`).then(res => res.data);\nexport default function useBusiness(coffeeId) {\n  _s();\n\n  return useQuery([\"Coffee\", coffeeId], () => fetchCoffee(coffeeId), {\n    initialData: () => {\n      var _queryCache$getQueryD;\n\n      return (_queryCache$getQueryD = queryCache.getQueryData(\"coffee\")) === null || _queryCache$getQueryD === void 0 ? void 0 : _queryCache$getQueryD.find(d => d.id == coffeeId);\n    },\n    initialStale: true,\n    refetchInterval: 5000\n  });\n}\n\n_s(useBusiness, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});","map":{"version":3,"sources":["/home/lenovo/Desktop/virtualcoffee/frontend/src/components/hooks/coffee_hooks/useCoffee.js"],"names":["React","axios","useQuery","queryCache","fetchCoffee","coffeeId","get","then","res","data","useBusiness","initialData","getQueryData","find","d","id","initialStale","refetchInterval"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,aAArC;AAEA,OAAO,MAAMC,WAAW,GAAIC,QAAD,IACzBJ,KAAK,CACFK,GADH,CACQ,0CAAyCD,QAAS,EAD1D,EAEGE,IAFH,CAESC,GAAD,IAASA,GAAG,CAACC,IAFrB,CADK;AAKP,eAAe,SAASC,WAAT,CAAqBL,QAArB,EAA+B;AAAA;;AAC5C,SAAOH,QAAQ,CAAC,CAAC,QAAD,EAAWG,QAAX,CAAD,EAAuB,MAAMD,WAAW,CAACC,QAAD,CAAxC,EAAoD;AACjEM,IAAAA,WAAW,EAAE,MAAM;AAAA;;AACjB,sCAAOR,UAAU,CAACS,YAAX,CAAwB,QAAxB,CAAP,0DAAO,sBAAmCC,IAAnC,CAAyCC,CAAD,IAAOA,CAAC,CAACC,EAAF,IAAQV,QAAvD,CAAP;AACD,KAHgE;AAIjEW,IAAAA,YAAY,EAAE,IAJmD;AAKjEC,IAAAA,eAAe,EAAE;AALgD,GAApD,CAAf;AAOD;;GARuBP,W;UACfR,Q","sourcesContent":["import React from \"react\";\nimport axios from \"axios\";\nimport { useQuery, queryCache } from \"react-query\";\n\nexport const fetchCoffee = (coffeeId) =>\n  axios\n    .get(`http://localhost:5000/api/coffee/fetch/${coffeeId}`)\n    .then((res) => res.data);\n\nexport default function useBusiness(coffeeId) {\n  return useQuery([\"Coffee\", coffeeId], () => fetchCoffee(coffeeId), {\n    initialData: () => {\n      return queryCache.getQueryData(\"coffee\")?.find((d) => d.id == coffeeId);\n    },\n    initialStale: true,\n    refetchInterval: 5000,\n  });\n}\n"]},"metadata":{},"sourceType":"module"}